# ##### dein plugin settings #####

# easy commentout key -> gc, gcc
[[plugins]]
repo = 'tomtom/tcomment_vim'

# easy insert () {} [] <> ...
[[plugins]]
repo = 'tpope/vim-surround'

# expantion copy and paste
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
	nmap p <Plug>(yankround-p)
	xmap p <Plug>(yankround-p)
	nmap P <Plug>(yankround-P)
	nmap gp <Plug>(yankround-gp)
	xmap gp <Plug>(yankround-gp)
	nmap gP <Plug>(yankround-gP)
	nmap <C-p> <Plug>(yankround-prev)
	nmap <C-n> <Plug>(yankround-next)
'''

# neovim terminal plugin
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
	let g:neoterm_autoinsert = 1
	let g:neoterm_autoscroll = 1
	" # let g:neoterm_split_on_tnew = 1
	let g:neoterm_default_mod = "belowright"

	function NTermInNewTab()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "tab"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	function NTermCurrentDir()
		let l:cmd = "cd " .expand("%:p:h")
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function NTermCMake()
		let l:cmd = "cd " .expand("%:p:h")
		let l:cmd = l:cmd . " && source ~/.config/nvim/scripts/AutoCMake.sh"
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function NTermCatkinMake()
		let l:cmd = "roscd"
		let l:cmd = l:cmd . " && catkin_make"
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function NTermPython()
		if expand("%:e") != 'py'
			echo '[error] Invalid file extension.'
			return
		endif

		let l:cmd = "python " .expand("%:p")
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function NTermTexCompile()
		if expand("%:e") != 'tex'
			echo '[error] Invalid file extension.'
			return
		endif

		let l:cmd = "cd " .expand("%:p:h")
		let l:cmd = l:cmd . " && platex " . expand("%")
		let l:cmd = l:cmd . " && dvipdfmx " . expand("%:p:r") . ".dvi"
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function GitPush( comment )
		let l:cmd = "cd " .expand("%:p:h")
		let l:cmd = l:cmd . " && source ~/.config/nvim/scripts/GitPush.sh " . a:comment
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function UpdateConfig()
		let l:cmd = "cd ~/.config/nvim"
		let l:cmd = l:cmd . " && git pull"
		call neoterm#exec({ 'cmd': [ cmd , '' ] })
		Topen
	endfunction

	function NTermMulti( v_num, h_num )
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "tab"
		Tnew

		" # vertical split
		let g:neoterm_default_mod = "vertical"
		for i in range( a:h_num - 1 )
			Tnew
		endfor

		" # holizontal split
		let g:neoterm_default_mod = "aboveleft"
		for i in range( a:h_num )

			for i in range( a:v_num - 1 )
				Tnew
			endfor

			" # move to left window
			execute "winc l"

		endfor

		" # move to top-left window
		execute "winc t"

		let g:neoterm_default_mod = l:tmp
	endfunction

	function NTermHolizontalSplit()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "aboveleft"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction

	function NTermVerticalSplit()
		let l:tmp = g:neoterm_default_mod
		let g:neoterm_default_mod = "vertical"
		Tnew
		let g:neoterm_default_mod = l:tmp
	endfunction


	nnoremap <silent> <c-t><c-t> :Ttoggle<CR>
	tnoremap <silent> <c-t><c-t> <C-\><C-n>:Ttoggle<CR>
	nnoremap <c-t><c-h> :call NTermHolizontalSplit()<CR>
	nnoremap <c-t><c-v> :call NTermVerticalSplit()<CR>

	command CMake                call NTermCMake()
	command CatkinMake           call NTermCatkinMake()
	command Python               call NTermPython()
	command TexCompile           call NTermTexCompile()
	command UpdateConfig         call UpdateConfig()
	command -nargs=1 GitPush     call GitPush(<f-args>)
	command -nargs=+ NTermMulti  call NTermMulti(<f-args>)
	command NTermMulti4          call NTermMulti(2,2)
	command NTermMulti6          call NTermMulti(3,2)
	command NTermMulti8          call NTermMulti(4,2)

	nnoremap * :MYCMD
'''

# alternate command
[[plugins]]
repo = 'kana/vim-altercmd'
hook_add = '''
	call altercmd#load()
	AlterCommand cmake   CMake
	AlterCommand ckm     CatkinMake
	AlterCommand py      Python
	AlterCommand tex     TexCompile
	AlterCommand upconf  UpdateConfig
	AlterCommand gitpush GitPush
	AlterCommand term    NTermMulti
	AlterCommand term4   NTermMulti4
	AlterCommand term6   NTermMulti6
	AlterCommand term8   NTermMulti8
'''

# cool statusline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
	let g:lightline = {
		\ 'enable': { 'tabline': 0 },
		\ 'colorscheme': 'wombat',
		\ 'active': {
			\ 'left': [ ['mode', 'paste'], ['readonly', 'filename', 'modified'] ],
			\ 'right': [ ['percent'], ['filetype'], ['fileencoding'] ]
		\ },
		\ 'inactive': {
			\ 'left': [ ['filename'] ],
			\ 'right': [ ['percent'], ['filetype'] ]
		\ },
		\ 'component_function':{
			\ 'filepath': 'FilePath'
		\ }
	\ }

	" # show statusbar
	set laststatus=2
	" # hide --INSERT--
	set noshowmode
'''

# file explorer
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''

	" # maximum number of files to scan : no limit
	let g:ctrlp_max_files = 0
	" # japanese file search off
	let g:ctrlp_use_migemo = 0
	" # ambiguous search off
	let g:ctrlp_regexp = 1
	" # use cache
	let g:ctrlp_use_caching = 1
	" # do not delete cache
	let g:ctrlp_clear_cache_on_exit = 0
	" # clear cache mapping
	let g:ctrlp_prompt_mappings = { 'PrtClearCache()': ['<C-r>'] }
	" # lazy search on (wait xxx[ms] <1:default ->250[ms]>)
	let g:ctrlp_lazy_update = 200 
	" # set ctrlp window size
	let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:50'
	" # do not show dotfiles
	let g:ctrlp_show_hidden = 0
	" # custom command
	let g:ctrlp_user_command = "ag %s -g '\\.(cpp|hpp|c|h|py|txt|tex|sh|bash|cfg|lua|md|launch|xml|csv|toml|yaml|vim)$'"
	" # ignore specific files
	" # let g:ctrlp_custom_ignore = {
	" # 	\ 'dir':  '\v[\/](\.git|\.hg|\.svn|build)$',
	" # 	\ 'file': '\v\.(ai|exe|so|a|dll|o|mp4|mp3|wav|png|jpg|pgm|zip|gz|bz2|pdf)$',
	" # 	\ 'link': 'SOME_BAD_SYMBOLIC_LINKS'
	" # \ }

	" # prevent from overwriting lightline
	let g:ctrlp_buffer_func = {
		\ 'enter': 'CtrlPEnter',
		\ 'exit': 'CtrlPLeave',
	\ }

	" # when CtrlP buffer opened, lightline and statusline off
	function! CtrlPEnter()
		set laststatus=0
	endfunction

		" # when CtrlP buffer closed, lightline and statusline on
	function! CtrlPLeave()
		set laststatus=2
	endfunction

	" # when you start nvim with no file, use CtrlP
	function! CtrlPIfEmpty()
		if @% == ""
			CtrlP ~/
		endif
	endfunction

	augroup AutoCtrlP
		autocmd!
		autocmd VimEnter * call CtrlPIfEmpty()
	augroup END

	function! CtrlPWithNowFName()
		let l:lazy_time = g:ctrlp_lazy_update
		let g:ctrlp_lazy_update = 0
		let g:ctrlp_default_input = fnamemodify(expand("%"), ":t:r") . "\\."
		CtrlP ~/
		let g:ctrlp_lazy_update = l:lazy_time
		let g:ctrlp_default_input = 0
	endfunction

	" let g:ctrlp_tabpage_position = 'ac'
	" let g:ctrlp_open_func = {
  "   \ 'files'     : 'MyCtrlPOpenFcn',
	" \ }

	" " # tabpage position
	" function! MyCtrlPOpenFcn(action, line) 
	" 	if a:action == 'v'
	" 		" # tabpage open before the current tab page
	" 		call call('ctrlp#acceptfile', ["t", a:line])
	" 		tabmove -
  "   else
	" 		call call('ctrlp#acceptfile', [a:action, a:line])
	" 	endif
	" endfunction

	" # CtrlP keymapping
	let g:ctrlp_map = '<nop>'
	nnoremap <silent> <Leader>e :CtrlP ~/<CR>
	nnoremap <silent> <Leader>E :CtrlPClearCache<CR>:CtrlP ~/<CR>
	nnoremap <silent> <Leader>n :CtrlP ~/.config/nvim<CR>
	nnoremap <silent> <Leader>w :call CtrlPWithNowFName()<CR>
'''

# colorscheme
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
	colorscheme iceberg
'''

# repo = 'bcicen/vim-vice'
# repo = 'altercation/vim-colors-solarized'
# repo = 'baverman/vim-babymate256'
# repo = 'romainl/Apprentice'
# repo = 'mbbill/vim-seattle'
# repo = 'cocopon/iceberg.vim'

# smart_tabline
[[plugins]]
repo = 'myrobo/smart_tabline.vim'

# games
[[plugins]]
repo = 'rbtnn/game_engine.vim'
on_i = 1
[[plugins]]
repo = 'rbtnn/mario.vim'
depends = 'game_engine.vim'
on_source = 'game_engine.vim'
[[plugins]]
repo = 'rbtnn/puyo.vim'
rev = 'puyoteto'
depends = 'game_engine.vim'
on_source = 'game_engine.vim'
[[plugins]]
repo = 'rbtnn/reversi.vim'
depends = 'game_engine.vim'
on_source = 'game_engine.vim'
